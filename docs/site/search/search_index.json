{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TensorDash TensorDash is an application that lets you remotely monitor your deep learning model's metrics and notifies you when your model training is completed or crashed. Why Tensordash? Watch your model train in real-time Remotely get details on the training and validation metrics Get notified when your model has completed trainng or when it has crashed. Get detailed graphs on your model\u2019s metrics. Installation Installing the Python Package Installing the Python Package There are two ways to install tensordash: Install tensordash from PyPI (recommended): Note: These installation steps assume that you are on a Linux or Mac environment. If you are on Windows, you will need to remove sudo to run the commands below. sudo pip install tensor-dash If you are using a virtualenv, you may want to avoid using sudo: pip install tensor-dash Alternatively: install tensordash from the GitHub source: First, clone TensorDash using git : git clone https://github.com/CleanPegasus/TensorDash.git Then, cd to the TensorDash folder and run the install command: cd TensorDash sudo python setup.py install Installing the Android App Install the android app from the play store.","title":"Home"},{"location":"#tensordash","text":"TensorDash is an application that lets you remotely monitor your deep learning model's metrics and notifies you when your model training is completed or crashed.","title":"TensorDash"},{"location":"#why-tensordash","text":"Watch your model train in real-time Remotely get details on the training and validation metrics Get notified when your model has completed trainng or when it has crashed. Get detailed graphs on your model\u2019s metrics.","title":"Why Tensordash?"},{"location":"#installation","text":"","title":"Installation"},{"location":"#installing-the-python-package","text":"","title":"Installing the Python Package"},{"location":"#installing-the-python-package_1","text":"There are two ways to install tensordash: Install tensordash from PyPI (recommended): Note: These installation steps assume that you are on a Linux or Mac environment. If you are on Windows, you will need to remove sudo to run the commands below. sudo pip install tensor-dash If you are using a virtualenv, you may want to avoid using sudo: pip install tensor-dash Alternatively: install tensordash from the GitHub source: First, clone TensorDash using git : git clone https://github.com/CleanPegasus/TensorDash.git Then, cd to the TensorDash folder and run the install command: cd TensorDash sudo python setup.py install","title":"Installing the Python Package"},{"location":"#installing-the-android-app","text":"Install the android app from the play store.","title":"Installing the Android App"},{"location":"about/","text":"About us We are just two university students who made this app in our dorm room. We are deep learning practitioners and thought if only we had an app that let us monitor remotely let our model metrics, so we got working and create this app.","title":"About"},{"location":"about/#about-us","text":"We are just two university students who made this app in our dorm room. We are deep learning practitioners and thought if only we had an app that let us monitor remotely let our model metrics, so we got working and create this app.","title":"About us"},{"location":"usage/","text":"How to use If you are using the app for he first time, sign up by clicking on the \"create an account\" button. After signing up, sign in to your account. Keras In your python code, import Tensordash library There are multiple ways to Link your Account , The Following are displayed. Specify only Model Name : from tensordash.tensordash import Tensordash histories = Tensordash(ModelName = '<YOUR_MODEL_NAME>') Enter Email : ........... Enter Tensordash Password : ******** Specify Model Name and Email address : from tensordash.tensordash import Tensordash histories = Tensordash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>') Enter Tensordash Password : ******** Specify Model Name, Email address and password : from tensordash.tensordash import Tensordash histories = Tensordash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>', password = '<YOUR PASSWORD>') In the app, if you have multiple models you would be able to identify your model by YOUR_MODEL_NAME, so this name has to be unique. Now you can monitor your model values and status using crash analysis . Simply use a try-catch block as shown below. try: model.fit( X_train, y_train, epochs = epochs, validation_data = validation_data, batch_size = batch_size, callbacks = [histories]) except: histories.sendCrash() OR Alternatively, if you do not want to use crash analysis then you can just monitor by just adding histories object to callback model.fit( X_train, y_train, epochs = epochs, validation_data = validation_data, batch_size = batch_size, callbacks = [histories]) Tensorflow In your python code, import Tensordash library To use Tensordash on pytorch, you have to pass the metrics as parameters to the function manually. The function takes: 1. loss 2. epoch 3. total_epochs 4. accuracy(optional) 5. val_loss(optional) 6. val_acc(optional), as the parameters from tensordash.tensordash import Customdash There are multiple ways to Link your Account , The Following are displayed. Specify only Model Name : histories = Customdash(ModelName = '<YOUR_MODEL_NAME>') Enter Email : ........... Enter Tensordash Password : ******** Specify Model Name and Email address : histories = Customdash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>') Enter Tensordash Password : ******** Specify Model Name, Email address and password : histories = Customdash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>', password = '<YOUR PASSWORD>') In the app, if you have multiple models you would be able to identify your model by YOUR_MODEL_NAME, so this name has to be unique. Now you can monitor your model values and status using crash analysis . Simply use a try-catch block as shown below. try: for epoch in range(num_epochs): epoch_loss_avg = tf.keras.metrics.Mean() epoch_accuracy = tf.keras.metrics.SparseCategoricalAccuracy() for x, y in train_dataset: loss_value, grads = grad(model, x, y) optimizer.apply_gradients(zip(grads, model.trainable_variables)) epoch_loss_avg(loss_value) epoch_accuracy(y, model(x, training=True)) train_loss_results.append(epoch_loss_avg.result()) train_accuracy_results.append(epoch_accuracy.result()) histories.sendLoss(loss = epoch_loss_avg.result(), accuracy = epoch_accuracy.result(), epoch = epoch, total_epochs = epochs) except: histories.sendCrash() OR Alternatively, if you do not want to use crash analysis then you can just monitor by just adding histories object to callback for epoch in range(num_epochs): epoch_loss_avg = tf.keras.metrics.Mean() epoch_accuracy = tf.keras.metrics.SparseCategoricalAccuracy() for x, y in train_dataset: loss_value, grads = grad(model, x, y) optimizer.apply_gradients(zip(grads, model.trainable_variables)) epoch_loss_avg(loss_value) epoch_accuracy(y, model(x, training=True)) train_loss_results.append(epoch_loss_avg.result()) train_accuracy_results.append(epoch_accuracy.result()) histories.sendLoss(loss = epoch_loss_avg.result(), accuracy = epoch_accuracy.result(), epoch = epoch, total_epochs = epochs) Pytorch In your python code, import Tensordash library from tensordash.torchdash import Torchdash To use Tensordash on pytorch, you have to pass the metrics as parameters to the function manually. The function takes: 1. loss 2. epoch 3. total_epochs 4. accuracy(optional) 5. val_loss(optional) 6. val_acc(optional), as the parameters There are multiple ways to Link your Account , The Following are displayed. Specify only Model Name : histories = Torchdash(ModelName = '<YOUR_MODEL_NAME>') Enter Email : ........... Enter Tensordash Password : ******** Specify Model Name and Email address : histories = Torchdash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>') Enter Tensordash Password : ******** Specify Model Name, Email address and password : histories = Torchdash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>', password = '<YOUR PASSWORD>') In the app, if you have multiple models you would be able to identify your model by YOUR_MODEL_NAME, so this name has to be unique. Now you can monitor your model values and status using crash analysis . Simply use a try-catch block as shown below. try: for epoch in range(epochs): losses = [] for data in trainset: X, y = data net.zero_grad() output = net(X.view(data_shape)) loss = F.nll_loss(output, y) loss.backward() optimizer.step() losses = np.asarray(losses) histories.sendLoss(loss = np.mean(losses), epoch = epoch, total_epochs = epochs) except: histories.sendCrash() OR Alternatively, if you do not want to use crash analysis then you can just monitor by just adding histories object to callback for epoch in range(epochs): losses = [] for data in trainset: X, y = data net.zero_grad() output = net(X.view(-1,784)) loss = F.nll_loss(output, y) loss.backward() optimizer.step() losses = np.asarray(losses) histories.sendLoss(loss = np.mean(losses), epoch = epoch, total_epochs = epochs) Fast.ai In your python code, import Tensordash library There are multiple ways to Link your Account , The Following are displayed. Specify only Model Name : from tensordash.fastdash import Fastdash learn = cnn_learner(data, models.resnet18, metrics=accuracy) my_cb = Fastdash(learn, ModelName = '<YOUR_MODEL_NAME>') Enter Email : ........... Enter Tensordash Password : ******** Specify Model Name and Email address : from tensordash.fastdash import Fastdash my_cb = Fastdash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>') Enter Tensordash Password : ******** Specify Model Name, Email address and password : from tensordash.fastdash import Fastdash my_cb = Tensordash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>', password = '<YOUR PASSWORD>') Now you can monitor your model values and status using crash analysis . Simply use a try-catch block as shown below. try: learn.fit(epochs, learning_rate, callbacks = my_cb) except: my_cb.sendCrash() OR Alternatively, if you do not want to use crash analysis then you can just monitor by just adding my_cb object to callback learn.fit(epochs, learning_rate, callbacks = my_cb)","title":"How to use"},{"location":"usage/#how-to-use","text":"If you are using the app for he first time, sign up by clicking on the \"create an account\" button. After signing up, sign in to your account.","title":"How to use"},{"location":"usage/#keras","text":"In your python code, import Tensordash library There are multiple ways to Link your Account , The Following are displayed. Specify only Model Name : from tensordash.tensordash import Tensordash histories = Tensordash(ModelName = '<YOUR_MODEL_NAME>') Enter Email : ........... Enter Tensordash Password : ******** Specify Model Name and Email address : from tensordash.tensordash import Tensordash histories = Tensordash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>') Enter Tensordash Password : ******** Specify Model Name, Email address and password : from tensordash.tensordash import Tensordash histories = Tensordash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>', password = '<YOUR PASSWORD>') In the app, if you have multiple models you would be able to identify your model by YOUR_MODEL_NAME, so this name has to be unique. Now you can monitor your model values and status using crash analysis . Simply use a try-catch block as shown below. try: model.fit( X_train, y_train, epochs = epochs, validation_data = validation_data, batch_size = batch_size, callbacks = [histories]) except: histories.sendCrash()","title":"Keras"},{"location":"usage/#or","text":"Alternatively, if you do not want to use crash analysis then you can just monitor by just adding histories object to callback model.fit( X_train, y_train, epochs = epochs, validation_data = validation_data, batch_size = batch_size, callbacks = [histories])","title":"OR"},{"location":"usage/#tensorflow","text":"In your python code, import Tensordash library To use Tensordash on pytorch, you have to pass the metrics as parameters to the function manually. The function takes: 1. loss 2. epoch 3. total_epochs 4. accuracy(optional) 5. val_loss(optional) 6. val_acc(optional), as the parameters from tensordash.tensordash import Customdash There are multiple ways to Link your Account , The Following are displayed. Specify only Model Name : histories = Customdash(ModelName = '<YOUR_MODEL_NAME>') Enter Email : ........... Enter Tensordash Password : ******** Specify Model Name and Email address : histories = Customdash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>') Enter Tensordash Password : ******** Specify Model Name, Email address and password : histories = Customdash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>', password = '<YOUR PASSWORD>') In the app, if you have multiple models you would be able to identify your model by YOUR_MODEL_NAME, so this name has to be unique. Now you can monitor your model values and status using crash analysis . Simply use a try-catch block as shown below. try: for epoch in range(num_epochs): epoch_loss_avg = tf.keras.metrics.Mean() epoch_accuracy = tf.keras.metrics.SparseCategoricalAccuracy() for x, y in train_dataset: loss_value, grads = grad(model, x, y) optimizer.apply_gradients(zip(grads, model.trainable_variables)) epoch_loss_avg(loss_value) epoch_accuracy(y, model(x, training=True)) train_loss_results.append(epoch_loss_avg.result()) train_accuracy_results.append(epoch_accuracy.result()) histories.sendLoss(loss = epoch_loss_avg.result(), accuracy = epoch_accuracy.result(), epoch = epoch, total_epochs = epochs) except: histories.sendCrash()","title":"Tensorflow"},{"location":"usage/#or_1","text":"Alternatively, if you do not want to use crash analysis then you can just monitor by just adding histories object to callback for epoch in range(num_epochs): epoch_loss_avg = tf.keras.metrics.Mean() epoch_accuracy = tf.keras.metrics.SparseCategoricalAccuracy() for x, y in train_dataset: loss_value, grads = grad(model, x, y) optimizer.apply_gradients(zip(grads, model.trainable_variables)) epoch_loss_avg(loss_value) epoch_accuracy(y, model(x, training=True)) train_loss_results.append(epoch_loss_avg.result()) train_accuracy_results.append(epoch_accuracy.result()) histories.sendLoss(loss = epoch_loss_avg.result(), accuracy = epoch_accuracy.result(), epoch = epoch, total_epochs = epochs)","title":"OR"},{"location":"usage/#pytorch","text":"In your python code, import Tensordash library from tensordash.torchdash import Torchdash To use Tensordash on pytorch, you have to pass the metrics as parameters to the function manually. The function takes: 1. loss 2. epoch 3. total_epochs 4. accuracy(optional) 5. val_loss(optional) 6. val_acc(optional), as the parameters There are multiple ways to Link your Account , The Following are displayed. Specify only Model Name : histories = Torchdash(ModelName = '<YOUR_MODEL_NAME>') Enter Email : ........... Enter Tensordash Password : ******** Specify Model Name and Email address : histories = Torchdash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>') Enter Tensordash Password : ******** Specify Model Name, Email address and password : histories = Torchdash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>', password = '<YOUR PASSWORD>') In the app, if you have multiple models you would be able to identify your model by YOUR_MODEL_NAME, so this name has to be unique. Now you can monitor your model values and status using crash analysis . Simply use a try-catch block as shown below. try: for epoch in range(epochs): losses = [] for data in trainset: X, y = data net.zero_grad() output = net(X.view(data_shape)) loss = F.nll_loss(output, y) loss.backward() optimizer.step() losses = np.asarray(losses) histories.sendLoss(loss = np.mean(losses), epoch = epoch, total_epochs = epochs) except: histories.sendCrash()","title":"Pytorch"},{"location":"usage/#or_2","text":"Alternatively, if you do not want to use crash analysis then you can just monitor by just adding histories object to callback for epoch in range(epochs): losses = [] for data in trainset: X, y = data net.zero_grad() output = net(X.view(-1,784)) loss = F.nll_loss(output, y) loss.backward() optimizer.step() losses = np.asarray(losses) histories.sendLoss(loss = np.mean(losses), epoch = epoch, total_epochs = epochs)","title":"OR"},{"location":"usage/#fastai","text":"In your python code, import Tensordash library There are multiple ways to Link your Account , The Following are displayed. Specify only Model Name : from tensordash.fastdash import Fastdash learn = cnn_learner(data, models.resnet18, metrics=accuracy) my_cb = Fastdash(learn, ModelName = '<YOUR_MODEL_NAME>') Enter Email : ........... Enter Tensordash Password : ******** Specify Model Name and Email address : from tensordash.fastdash import Fastdash my_cb = Fastdash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>') Enter Tensordash Password : ******** Specify Model Name, Email address and password : from tensordash.fastdash import Fastdash my_cb = Tensordash( ModelName = '<YOUR_MODEL_NAME>', email = '<YOUR_EMAIL_ID>', password = '<YOUR PASSWORD>') Now you can monitor your model values and status using crash analysis . Simply use a try-catch block as shown below. try: learn.fit(epochs, learning_rate, callbacks = my_cb) except: my_cb.sendCrash()","title":"Fast.ai"},{"location":"usage/#or_3","text":"Alternatively, if you do not want to use crash analysis then you can just monitor by just adding my_cb object to callback learn.fit(epochs, learning_rate, callbacks = my_cb)","title":"OR"}]}